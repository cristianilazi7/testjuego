import { PhoneNumberUtil, PhoneNumberFormat } from 'google-libphonenumber';
import { Injectable, NgModule, Component, forwardRef, Input, ViewChild, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BsDropdownModule, TooltipModule } from 'ngx-bootstrap';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxIntlTelInputService {
    constructor() { }
}
NgxIntlTelInputService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgxIntlTelInputService.ctorParameters = () => [];
/** @nocollapse */ NgxIntlTelInputService.ngInjectableDef = defineInjectable({ factory: function NgxIntlTelInputService_Factory() { return new NgxIntlTelInputService(); }, token: NgxIntlTelInputService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const CountryISO = {
    Afghanistan: 'af',
    Albania: 'al',
    Algeria: 'dz',
    AmericanSamoa: 'as',
    Andorra: 'ad',
    Angola: 'ao',
    Anguilla: 'ai',
    AntiguaAndBarbuda: 'ag',
    Argentina: 'ar',
    Armenia: 'am',
    Aruba: 'aw',
    Australia: 'au',
    Austria: 'at',
    Azerbaijan: 'az',
    Bahamas: 'bs',
    Bahrain: 'bh',
    Bangladesh: 'bd',
    Barbados: 'bb',
    Belarus: 'by',
    Belgium: 'be',
    Belize: 'bz',
    Benin: 'bj',
    Bermuda: 'bm',
    Bhutan: 'bt',
    Bolivia: 'bo',
    BosniaAndHerzegovina: 'ba',
    Botswana: 'bw',
    Brazil: 'br',
    BritishIndianOceanTerritory: 'io',
    BritishVirginIslands: 'vg',
    Brunei: 'bn',
    Bulgaria: 'bg',
    BurkinaFaso: 'bf',
    Burundi: 'bi',
    Cambodia: 'kh',
    Cameroon: 'cm',
    Canada: 'ca',
    CapeVerde: 'cv',
    CaribbeanNetherlands: 'bq',
    CaymanIslands: 'ky',
    CentralAfricanRepublic: 'cf',
    Chad: 'td',
    Chile: 'cl',
    China: 'cn',
    ChristmasIsland: 'cx',
    Cocos: 'cc',
    Colombia: 'co',
    Comoros: 'km',
    CongoDRCJamhuriYaKidemokrasiaYaKongo: 'cd',
    CongoRepublicCongoBrazzaville: 'cg',
    CookIslands: 'ck',
    CostaRica: 'cr',
    CôteDIvoire: 'ci',
    Croatia: 'hr',
    Cuba: 'cu',
    Curaçao: 'cw',
    Cyprus: 'cy',
    CzechRepublic: 'cz',
    Denmark: 'dk',
    Djibouti: 'dj',
    Dominica: 'dm',
    DominicanRepublic: 'do',
    Ecuador: 'ec',
    Egypt: 'eg',
    ElSalvador: 'sv',
    EquatorialGuinea: 'gq',
    Eritrea: 'er',
    Estonia: 'ee',
    Ethiopia: 'et',
    FalklandIslands: 'fk',
    FaroeIslands: 'fo',
    Fiji: 'fj',
    Finland: 'fi',
    France: 'fr',
    FrenchGuiana: 'gf',
    FrenchPolynesia: 'pf',
    Gabon: 'ga',
    Gambia: 'gm',
    Georgia: 'ge',
    Germany: 'de',
    Ghana: 'gh',
    Gibraltar: 'gi',
    Greece: 'gr',
    Greenland: 'gl',
    Grenada: 'gd',
    Guadeloupe: 'gp',
    Guam: 'gu',
    Guatemala: 'gt',
    Guernsey: 'gg',
    Guinea: 'gn',
    GuineaBissau: 'gw',
    Guyana: 'gy',
    Haiti: 'ht',
    Honduras: 'hn',
    HongKong: 'hk',
    Hungary: 'hu',
    Iceland: 'is',
    India: 'in',
    Indonesia: 'id',
    Iran: 'ir',
    Iraq: 'iq',
    Ireland: 'ie',
    IsleOfMan: 'im',
    Israel: 'il',
    Italy: 'it',
    Jamaica: 'jm',
    Japan: 'jp',
    Jersey: 'je',
    Jordan: 'jo',
    Kazakhstan: 'kz',
    Kenya: 'ke',
    Kiribati: 'ki',
    Kosovo: 'xk',
    Kuwait: 'kw',
    Kyrgyzstan: 'kg',
    Laos: 'la',
    Latvia: 'lv',
    Lebanon: 'lb',
    Lesotho: 'ls',
    Liberia: 'lr',
    Libya: 'ly',
    Liechtenstein: 'li',
    Lithuania: 'lt',
    Luxembourg: 'lu',
    Macau: 'mo',
    Macedonia: 'mk',
    Madagascar: 'mg',
    Malawi: 'mw',
    Malaysia: 'my',
    Maldives: 'mv',
    Mali: 'ml',
    Malta: 'mt',
    MarshallIslands: 'mh',
    Martinique: 'mq',
    Mauritania: 'mr',
    Mauritius: 'mu',
    Mayotte: 'yt',
    Mexico: 'mx',
    Micronesia: 'fm',
    Moldova: 'md',
    Monaco: 'mc',
    Mongolia: 'mn',
    Montenegro: 'me',
    Montserrat: 'ms',
    Morocco: 'ma',
    Mozambique: 'mz',
    Myanmar: 'mm',
    Namibia: 'na',
    Nauru: 'nr',
    Nepal: 'np',
    Netherlands: 'nl',
    NewCaledonia: 'nc',
    NewZealand: 'nz',
    Nicaragua: 'ni',
    Niger: 'ne',
    Nigeria: 'ng',
    Niue: 'nu',
    NorfolkIsland: 'nf',
    NorthKorea: 'kp',
    NorthernMarianaIslands: 'mp',
    Norway: 'no',
    Oman: 'om',
    Pakistan: 'pk',
    Palau: 'pw',
    Palestine: 'ps',
    Panama: 'pa',
    PapuaNewGuinea: 'pg',
    Paraguay: 'py',
    Peru: 'pe',
    Philippines: 'ph',
    Poland: 'pl',
    Portugal: 'pt',
    PuertoRico: 'pr',
    Qatar: 'qa',
    Réunion: 're',
    Romania: 'ro',
    Russia: 'ru',
    Rwanda: 'rw',
    SaintBarthélemy: 'bl',
    SaintHelena: 'sh',
    SaintKittsAndNevis: 'kn',
    SaintLucia: 'lc',
    SaintMartin: 'mf',
    SaintPierreAndMiquelon: 'pm',
    SaintVincentAndTheGrenadines: 'vc',
    Samoa: 'ws',
    SanMarino: 'sm',
    SãoToméAndPríncipe: 'st',
    SaudiArabia: 'sa',
    Senegal: 'sn',
    Serbia: 'rs',
    Seychelles: 'sc',
    SierraLeone: 'sl',
    Singapore: 'sg',
    SintMaarten: 'sx',
    Slovakia: 'sk',
    Slovenia: 'si',
    SolomonIslands: 'sb',
    Somalia: 'so',
    SouthAfrica: 'za',
    SouthKorea: 'kr',
    SouthSudan: 'ss',
    Spain: 'es',
    SriLanka: 'lk',
    Sudan: 'sd',
    Suriname: 'sr',
    SvalbardAndJanMayen: 'sj',
    Swaziland: 'sz',
    Sweden: 'se',
    Switzerland: 'ch',
    Syria: 'sy',
    Taiwan: 'tw',
    Tajikistan: 'tj',
    Tanzania: 'tz',
    Thailand: 'th',
    TimorLeste: 'tl',
    Togo: 'tg',
    Tokelau: 'tk',
    Tonga: 'to',
    TrinidadAndTobago: 'tt',
    Tunisia: 'tn',
    Turkey: 'tr',
    Turkmenistan: 'tm',
    TurksAndCaicosIslands: 'tc',
    Tuvalu: 'tv',
    USVirginIslands: 'vi',
    Uganda: 'ug',
    Ukraine: 'ua',
    UnitedArabEmirates: 'ae',
    UnitedKingdom: 'gb',
    UnitedStates: 'us',
    Uruguay: 'uy',
    Uzbekistan: 'uz',
    Vanuatu: 'vu',
    VaticanCity: 'va',
    Venezuela: 've',
    Vietnam: 'vn',
    WallisAndFutuna: 'wf',
    WesternSahara: 'eh',
    Yemen: 'ye',
    Zambia: 'zm',
    Zimbabwe: 'zw',
    ÅlandIslands: 'ax',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CountryCode {
    constructor() {
        this.allCountries = [
            [
                'Afghanistan (‫افغانستان‬‎)',
                CountryISO.Afghanistan,
                '93'
            ],
            [
                'Albania (Shqipëri)',
                CountryISO.Albania,
                '355'
            ],
            [
                'Algeria (‫الجزائر‬‎)',
                CountryISO.Algeria,
                '213'
            ],
            [
                'American Samoa',
                CountryISO.AmericanSamoa,
                '1684'
            ],
            [
                'Andorra',
                CountryISO.Andorra,
                '376'
            ],
            [
                'Angola',
                CountryISO.Angola,
                '244'
            ],
            [
                'Anguilla',
                CountryISO.Anguilla,
                '1264'
            ],
            [
                'Antigua and Barbuda',
                CountryISO.AntiguaAndBarbuda,
                '1268'
            ],
            [
                'Argentina',
                CountryISO.Argentina,
                '54'
            ],
            [
                'Armenia (Հայաստան)',
                CountryISO.Armenia,
                '374'
            ],
            [
                'Aruba',
                CountryISO.Aruba,
                '297'
            ],
            [
                'Australia',
                CountryISO.Australia,
                '61',
                0
            ],
            [
                'Austria (Österreich)',
                CountryISO.Austria,
                '43'
            ],
            [
                'Azerbaijan (Azərbaycan)',
                CountryISO.Azerbaijan,
                '994'
            ],
            [
                'Bahamas',
                CountryISO.Bahamas,
                '1242'
            ],
            [
                'Bahrain (‫البحرين‬‎)',
                CountryISO.Bahrain,
                '973'
            ],
            [
                'Bangladesh (বাংলাদেশ)',
                CountryISO.Bangladesh,
                '880'
            ],
            [
                'Barbados',
                CountryISO.Barbados,
                '1246'
            ],
            [
                'Belarus (Беларусь)',
                CountryISO.Belarus,
                '375'
            ],
            [
                'Belgium (België)',
                CountryISO.Belgium,
                '32'
            ],
            [
                'Belize',
                CountryISO.Belize,
                '501'
            ],
            [
                'Benin (Bénin)',
                CountryISO.Benin,
                '229'
            ],
            [
                'Bermuda',
                CountryISO.Bermuda,
                '1441'
            ],
            [
                'Bhutan (འབྲུག)',
                CountryISO.Bhutan,
                '975'
            ],
            [
                'Bolivia',
                CountryISO.Bolivia,
                '591'
            ],
            [
                'Bosnia and Herzegovina (Босна и Херцеговина)',
                CountryISO.BosniaAndHerzegovina,
                '387'
            ],
            [
                'Botswana',
                CountryISO.Botswana,
                '267'
            ],
            [
                'Brazil (Brasil)',
                CountryISO.Brazil,
                '55'
            ],
            [
                'British Indian Ocean Territory',
                CountryISO.BritishIndianOceanTerritory,
                '246'
            ],
            [
                'British Virgin Islands',
                CountryISO.BritishVirginIslands,
                '1284'
            ],
            [
                'Brunei',
                CountryISO.Brunei,
                '673'
            ],
            [
                'Bulgaria (България)',
                CountryISO.Bulgaria,
                '359'
            ],
            [
                'Burkina Faso',
                CountryISO.BurkinaFaso,
                '226'
            ],
            [
                'Burundi (Uburundi)',
                CountryISO.Burundi,
                '257'
            ],
            [
                'Cambodia (កម្ពុជា)',
                CountryISO.Cambodia,
                '855'
            ],
            [
                'Cameroon (Cameroun)',
                CountryISO.Cameroon,
                '237'
            ],
            [
                'Canada',
                CountryISO.Canada,
                '1',
                1,
                [
                    '204', '226', '236', '249', '250', '289', '306', '343', '365', '387', '403', '416',
                    '418', '431', '437', '438', '450', '506', '514', '519', '548', '579', '581', '587',
                    '604', '613', '639', '647', '672', '705', '709', '742', '778', '780', '782', '807',
                    '819', '825', '867', '873', '902', '905'
                ]
            ],
            [
                'Cape Verde (Kabu Verdi)',
                CountryISO.CapeVerde,
                '238'
            ],
            [
                'Caribbean Netherlands',
                CountryISO.CaribbeanNetherlands,
                '599',
                1
            ],
            [
                'Cayman Islands',
                CountryISO.CaymanIslands,
                '1345'
            ],
            [
                'Central African Republic (République centrafricaine)',
                CountryISO.CentralAfricanRepublic,
                '236'
            ],
            [
                'Chad (Tchad)',
                CountryISO.Chad,
                '235'
            ],
            [
                'Chile',
                CountryISO.Chile,
                '56'
            ],
            [
                'China (中国)',
                CountryISO.China,
                '86'
            ],
            [
                'Christmas Island',
                CountryISO.ChristmasIsland,
                '61',
                2
            ],
            [
                'Cocos (Keeling) Islands',
                CountryISO.Cocos,
                '61',
                1
            ],
            [
                'Colombia',
                CountryISO.Colombia,
                '57'
            ],
            [
                'Comoros (‫جزر القمر‬‎)',
                CountryISO.Comoros,
                '269'
            ],
            [
                'Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)',
                CountryISO.CongoDRCJamhuriYaKidemokrasiaYaKongo,
                '243'
            ],
            [
                'Congo (Republic) (Congo-Brazzaville)',
                CountryISO.CongoRepublicCongoBrazzaville,
                '242'
            ],
            [
                'Cook Islands',
                CountryISO.CookIslands,
                '682'
            ],
            [
                'Costa Rica',
                CountryISO.CostaRica,
                '506'
            ],
            [
                'Côte d’Ivoire',
                CountryISO.CôteDIvoire,
                '225'
            ],
            [
                'Croatia (Hrvatska)',
                CountryISO.Croatia,
                '385'
            ],
            [
                'Cuba',
                CountryISO.Cuba,
                '53'
            ],
            [
                'Curaçao',
                CountryISO.Curaçao,
                '599',
                0
            ],
            [
                'Cyprus (Κύπρος)',
                CountryISO.Cyprus,
                '357'
            ],
            [
                'Czech Republic (Česká republika)',
                CountryISO.CzechRepublic,
                '420'
            ],
            [
                'Denmark (Danmark)',
                CountryISO.Denmark,
                '45'
            ],
            [
                'Djibouti',
                CountryISO.Djibouti,
                '253'
            ],
            [
                'Dominica',
                CountryISO.Dominica,
                '1767'
            ],
            [
                'Dominican Republic (República Dominicana)',
                CountryISO.DominicanRepublic,
                '1',
                2,
                ['809', '829', '849']
            ],
            [
                'Ecuador',
                CountryISO.Ecuador,
                '593'
            ],
            [
                'Egypt (‫مصر‬‎)',
                CountryISO.Egypt,
                '20'
            ],
            [
                'El Salvador',
                CountryISO.ElSalvador,
                '503'
            ],
            [
                'Equatorial Guinea (Guinea Ecuatorial)',
                CountryISO.EquatorialGuinea,
                '240'
            ],
            [
                'Eritrea',
                CountryISO.Eritrea,
                '291'
            ],
            [
                'Estonia (Eesti)',
                CountryISO.Estonia,
                '372'
            ],
            [
                'Ethiopia',
                CountryISO.Ethiopia,
                '251'
            ],
            [
                'Falkland Islands (Islas Malvinas)',
                CountryISO.FalklandIslands,
                '500'
            ],
            [
                'Faroe Islands (Føroyar)',
                CountryISO.FaroeIslands,
                '298'
            ],
            [
                'Fiji',
                CountryISO.Fiji,
                '679'
            ],
            [
                'Finland (Suomi)',
                CountryISO.Finland,
                '358',
                0
            ],
            [
                'France',
                CountryISO.France,
                '33'
            ],
            [
                'French Guiana (Guyane française)',
                CountryISO.FrenchGuiana,
                '594'
            ],
            [
                'French Polynesia (Polynésie française)',
                CountryISO.FrenchPolynesia,
                '689'
            ],
            [
                'Gabon',
                CountryISO.Gabon,
                '241'
            ],
            [
                'Gambia',
                CountryISO.Gambia,
                '220'
            ],
            [
                'Georgia (საქართველო)',
                CountryISO.Georgia,
                '995'
            ],
            [
                'Germany (Deutschland)',
                CountryISO.Germany,
                '49'
            ],
            [
                'Ghana (Gaana)',
                CountryISO.Ghana,
                '233'
            ],
            [
                'Gibraltar',
                CountryISO.Gibraltar,
                '350'
            ],
            [
                'Greece (Ελλάδα)',
                CountryISO.Greece,
                '30'
            ],
            [
                'Greenland (Kalaallit Nunaat)',
                CountryISO.Greenland,
                '299'
            ],
            [
                'Grenada',
                CountryISO.Grenada,
                '1473'
            ],
            [
                'Guadeloupe',
                CountryISO.Guadeloupe,
                '590',
                0
            ],
            [
                'Guam',
                CountryISO.Guam,
                '1671'
            ],
            [
                'Guatemala',
                CountryISO.Guatemala,
                '502'
            ],
            [
                'Guernsey',
                CountryISO.Guernsey,
                '44',
                1,
                [1481]
            ],
            [
                'Guinea (Guinée)',
                CountryISO.Guinea,
                '224'
            ],
            [
                'Guinea-Bissau (Guiné Bissau)',
                CountryISO.GuineaBissau,
                '245'
            ],
            [
                'Guyana',
                CountryISO.Guyana,
                '592'
            ],
            [
                'Haiti',
                CountryISO.Haiti,
                '509'
            ],
            [
                'Honduras',
                CountryISO.Honduras,
                '504'
            ],
            [
                'Hong Kong (香港)',
                CountryISO.HongKong,
                '852'
            ],
            [
                'Hungary (Magyarország)',
                CountryISO.Hungary,
                '36'
            ],
            [
                'Iceland (Ísland)',
                CountryISO.Iceland,
                '354'
            ],
            [
                'India (भारत)',
                CountryISO.India,
                '91'
            ],
            [
                'Indonesia',
                CountryISO.Indonesia,
                '62'
            ],
            [
                'Iran (‫ایران‬‎)',
                CountryISO.Iran,
                '98'
            ],
            [
                'Iraq (‫العراق‬‎)',
                CountryISO.Iraq,
                '964'
            ],
            [
                'Ireland',
                CountryISO.Ireland,
                '353'
            ],
            [
                'Isle of Man',
                CountryISO.IsleOfMan,
                '44',
                2,
                [1624]
            ],
            [
                'Israel (‫ישראל‬‎)',
                CountryISO.Israel,
                '972'
            ],
            [
                'Italy (Italia)',
                CountryISO.Italy,
                '39',
                0
            ],
            [
                'Jamaica',
                CountryISO.Jamaica,
                '1876'
            ],
            [
                'Japan (日本)',
                CountryISO.Japan,
                '81'
            ],
            [
                'Jersey',
                CountryISO.Jersey,
                '44',
                3,
                [1534]
            ],
            [
                'Jordan (‫الأردن‬‎)',
                CountryISO.Jordan,
                '962'
            ],
            [
                'Kazakhstan (Казахстан)',
                CountryISO.Kazakhstan,
                '7',
                1
            ],
            [
                'Kenya',
                CountryISO.Kenya,
                '254'
            ],
            [
                'Kiribati',
                CountryISO.Kiribati,
                '686'
            ],
            [
                'Kosovo',
                CountryISO.Kosovo,
                '383'
            ],
            [
                'Kuwait (‫الكويت‬‎)',
                CountryISO.Kuwait,
                '965'
            ],
            [
                'Kyrgyzstan (Кыргызстан)',
                CountryISO.Kyrgyzstan,
                '996'
            ],
            [
                'Laos (ລາວ)',
                CountryISO.Laos,
                '856'
            ],
            [
                'Latvia (Latvija)',
                CountryISO.Latvia,
                '371'
            ],
            [
                'Lebanon (‫لبنان‬‎)',
                CountryISO.Lebanon,
                '961'
            ],
            [
                'Lesotho',
                CountryISO.Lesotho,
                '266'
            ],
            [
                'Liberia',
                CountryISO.Liberia,
                '231'
            ],
            [
                'Libya (‫ليبيا‬‎)',
                CountryISO.Libya,
                '218'
            ],
            [
                'Liechtenstein',
                CountryISO.Liechtenstein,
                '423'
            ],
            [
                'Lithuania (Lietuva)',
                CountryISO.Lithuania,
                '370'
            ],
            [
                'Luxembourg',
                CountryISO.Luxembourg,
                '352'
            ],
            [
                'Macau (澳門)',
                CountryISO.Macau,
                '853'
            ],
            [
                'Macedonia (FYROM) (Македонија)',
                CountryISO.Macedonia,
                '389'
            ],
            [
                'Madagascar (Madagasikara)',
                CountryISO.Madagascar,
                '261'
            ],
            [
                'Malawi',
                CountryISO.Malawi,
                '265'
            ],
            [
                'Malaysia',
                CountryISO.Malaysia,
                '60'
            ],
            [
                'Maldives',
                CountryISO.Maldives,
                '960'
            ],
            [
                'Mali',
                CountryISO.Mali,
                '223'
            ],
            [
                'Malta',
                CountryISO.Malta,
                '356'
            ],
            [
                'Marshall Islands',
                CountryISO.MarshallIslands,
                '692'
            ],
            [
                'Martinique',
                CountryISO.Martinique,
                '596'
            ],
            [
                'Mauritania (‫موريتانيا‬‎)',
                CountryISO.Mauritania,
                '222'
            ],
            [
                'Mauritius (Moris)',
                CountryISO.Mauritius,
                '230'
            ],
            [
                'Mayotte',
                CountryISO.Mayotte,
                '262',
                1
            ],
            [
                'Mexico (México)',
                CountryISO.Mexico,
                '52'
            ],
            [
                'Micronesia',
                CountryISO.Micronesia,
                '691'
            ],
            [
                'Moldova (Republica Moldova)',
                CountryISO.Moldova,
                '373'
            ],
            [
                'Monaco',
                CountryISO.Monaco,
                '377'
            ],
            [
                'Mongolia (Монгол)',
                CountryISO.Mongolia,
                '976'
            ],
            [
                'Montenegro (Crna Gora)',
                CountryISO.Montenegro,
                '382'
            ],
            [
                'Montserrat',
                CountryISO.Montserrat,
                '1664'
            ],
            [
                'Morocco (‫المغرب‬‎)',
                CountryISO.Morocco,
                '212',
                0
            ],
            [
                'Mozambique (Moçambique)',
                CountryISO.Mozambique,
                '258'
            ],
            [
                'Myanmar (Burma) (မြန်မာ)',
                CountryISO.Myanmar,
                '95'
            ],
            [
                'Namibia (Namibië)',
                CountryISO.Namibia,
                '264'
            ],
            [
                'Nauru',
                CountryISO.Nauru,
                '674'
            ],
            [
                'Nepal (नेपाल)',
                CountryISO.Nepal,
                '977'
            ],
            [
                'Netherlands (Nederland)',
                CountryISO.Netherlands,
                '31'
            ],
            [
                'New Caledonia (Nouvelle-Calédonie)',
                CountryISO.NewCaledonia,
                '687'
            ],
            [
                'New Zealand',
                CountryISO.NewZealand,
                '64'
            ],
            [
                'Nicaragua',
                CountryISO.Nicaragua,
                '505'
            ],
            [
                'Niger (Nijar)',
                CountryISO.Niger,
                '227'
            ],
            [
                'Nigeria',
                CountryISO.Nigeria,
                '234'
            ],
            [
                'Niue',
                CountryISO.Niue,
                '683'
            ],
            [
                'Norfolk Island',
                CountryISO.NorfolkIsland,
                '672'
            ],
            [
                'North Korea (조선 민주주의 인민 공화국)',
                CountryISO.NorthKorea,
                '850'
            ],
            [
                'Northern Mariana Islands',
                CountryISO.NorthernMarianaIslands,
                '1670'
            ],
            [
                'Norway (Norge)',
                CountryISO.Norway,
                '47',
                0
            ],
            [
                'Oman (‫عُمان‬‎)',
                CountryISO.Oman,
                '968'
            ],
            [
                'Pakistan (‫پاکستان‬‎)',
                CountryISO.Pakistan,
                '92'
            ],
            [
                'Palau',
                CountryISO.Palau,
                '680'
            ],
            [
                'Palestine (‫فلسطين‬‎)',
                CountryISO.Palestine,
                '970'
            ],
            [
                'Panama (Panamá)',
                CountryISO.Panama,
                '507'
            ],
            [
                'Papua New Guinea',
                CountryISO.PapuaNewGuinea,
                '675'
            ],
            [
                'Paraguay',
                CountryISO.Paraguay,
                '595'
            ],
            [
                'Peru (Perú)',
                CountryISO.Peru,
                '51'
            ],
            [
                'Philippines',
                CountryISO.Philippines,
                '63'
            ],
            [
                'Poland (Polska)',
                CountryISO.Poland,
                '48'
            ],
            [
                'Portugal',
                CountryISO.Portugal,
                '351'
            ],
            [
                'Puerto Rico',
                CountryISO.PuertoRico,
                '1',
                3,
                ['787', '939']
            ],
            [
                'Qatar (‫قطر‬‎)',
                CountryISO.Qatar,
                '974'
            ],
            [
                'Réunion (La Réunion)',
                CountryISO.Réunion,
                '262',
                0
            ],
            [
                'Romania (România)',
                CountryISO.Romania,
                '40'
            ],
            [
                'Russia (Россия)',
                CountryISO.Russia,
                '7',
                0
            ],
            [
                'Rwanda',
                CountryISO.Rwanda,
                '250'
            ],
            [
                'Saint Barthélemy (Saint-Barthélemy)',
                CountryISO.SaintBarthélemy,
                '590',
                1
            ],
            [
                'Saint Helena',
                CountryISO.SaintHelena,
                '290'
            ],
            [
                'Saint Kitts and Nevis',
                CountryISO.SaintKittsAndNevis,
                '1869'
            ],
            [
                'Saint Lucia',
                CountryISO.SaintLucia,
                '1758'
            ],
            [
                'Saint Martin (Saint-Martin (partie française))',
                CountryISO.SaintMartin,
                '590',
                2
            ],
            [
                'Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)',
                CountryISO.SaintPierreAndMiquelon,
                '508'
            ],
            [
                'Saint Vincent and the Grenadines',
                CountryISO.SaintVincentAndTheGrenadines,
                '1784'
            ],
            [
                'Samoa',
                CountryISO.Samoa,
                '685'
            ],
            [
                'San Marino',
                CountryISO.SanMarino,
                '378'
            ],
            [
                'São Tomé and Príncipe (São Tomé e Príncipe)',
                CountryISO.SãoToméAndPríncipe,
                '239'
            ],
            [
                'Saudi Arabia (‫المملكة العربية السعودية‬‎)',
                CountryISO.SaudiArabia,
                '966'
            ],
            [
                'Senegal (Sénégal)',
                CountryISO.Senegal,
                '221'
            ],
            [
                'Serbia (Србија)',
                CountryISO.Serbia,
                '381'
            ],
            [
                'Seychelles',
                CountryISO.Seychelles,
                '248'
            ],
            [
                'Sierra Leone',
                CountryISO.SierraLeone,
                '232'
            ],
            [
                'Singapore',
                CountryISO.Singapore,
                '65'
            ],
            [
                'Sint Maarten',
                CountryISO.SintMaarten,
                '1721'
            ],
            [
                'Slovakia (Slovensko)',
                CountryISO.Slovakia,
                '421'
            ],
            [
                'Slovenia (Slovenija)',
                CountryISO.Slovenia,
                '386'
            ],
            [
                'Solomon Islands',
                CountryISO.SolomonIslands,
                '677'
            ],
            [
                'Somalia (Soomaaliya)',
                CountryISO.Somalia,
                '252'
            ],
            [
                'South Africa',
                CountryISO.SouthAfrica,
                '27'
            ],
            [
                'South Korea (대한민국)',
                CountryISO.SouthKorea,
                '82'
            ],
            [
                'South Sudan (‫جنوب السودان‬‎)',
                CountryISO.SouthSudan,
                '211'
            ],
            [
                'Spain (España)',
                CountryISO.Spain,
                '34'
            ],
            [
                'Sri Lanka (ශ්‍රී ලංකාව)',
                CountryISO.SriLanka,
                '94'
            ],
            [
                'Sudan (‫السودان‬‎)',
                CountryISO.Sudan,
                '249'
            ],
            [
                'Suriname',
                CountryISO.Suriname,
                '597'
            ],
            [
                'Svalbard and Jan Mayen',
                CountryISO.SvalbardAndJanMayen,
                '47',
                1
            ],
            [
                'Swaziland',
                CountryISO.Swaziland,
                '268'
            ],
            [
                'Sweden (Sverige)',
                CountryISO.Sweden,
                '46'
            ],
            [
                'Switzerland (Schweiz)',
                CountryISO.Switzerland,
                '41'
            ],
            [
                'Syria (‫سوريا‬‎)',
                CountryISO.Syria,
                '963'
            ],
            [
                'Taiwan (台灣)',
                CountryISO.Taiwan,
                '886'
            ],
            [
                'Tajikistan',
                CountryISO.Tajikistan,
                '992'
            ],
            [
                'Tanzania',
                CountryISO.Tanzania,
                '255'
            ],
            [
                'Thailand (ไทย)',
                CountryISO.Thailand,
                '66'
            ],
            [
                'Timor-Leste',
                CountryISO.TimorLeste,
                '670'
            ],
            [
                'Togo',
                CountryISO.Togo,
                '228'
            ],
            [
                'Tokelau',
                CountryISO.Tokelau,
                '690'
            ],
            [
                'Tonga',
                CountryISO.Tonga,
                '676'
            ],
            [
                'Trinidad and Tobago',
                CountryISO.TrinidadAndTobago,
                '1868'
            ],
            [
                'Tunisia (‫تونس‬‎)',
                CountryISO.Tunisia,
                '216'
            ],
            [
                'Turkey (Türkiye)',
                CountryISO.Turkey,
                '90'
            ],
            [
                'Turkmenistan',
                CountryISO.Turkmenistan,
                '993'
            ],
            [
                'Turks and Caicos Islands',
                CountryISO.TurksAndCaicosIslands,
                '1649'
            ],
            [
                'Tuvalu',
                CountryISO.Tuvalu,
                '688'
            ],
            [
                'U.S. Virgin Islands',
                CountryISO.USVirginIslands,
                '1340'
            ],
            [
                'Uganda',
                CountryISO.Uganda,
                '256'
            ],
            [
                'Ukraine (Україна)',
                CountryISO.Ukraine,
                '380'
            ],
            [
                'United Arab Emirates (‫الإمارات العربية المتحدة‬‎)',
                CountryISO.UnitedArabEmirates,
                '971'
            ],
            [
                'United Kingdom',
                CountryISO.UnitedKingdom,
                '44',
                0
            ],
            [
                'United States',
                CountryISO.UnitedStates,
                '1',
                0
            ],
            [
                'Uruguay',
                CountryISO.Uruguay,
                '598'
            ],
            [
                'Uzbekistan (Oʻzbekiston)',
                CountryISO.Uzbekistan,
                '998'
            ],
            [
                'Vanuatu',
                CountryISO.Vanuatu,
                '678'
            ],
            [
                'Vatican City (Città del Vaticano)',
                CountryISO.VaticanCity,
                '39',
                1
            ],
            [
                'Venezuela',
                CountryISO.Venezuela,
                '58'
            ],
            [
                'Vietnam (Việt Nam)',
                CountryISO.Vietnam,
                '84'
            ],
            [
                'Wallis and Futuna',
                CountryISO.WallisAndFutuna,
                '681'
            ],
            [
                'Western Sahara (‫الصحراء الغربية‬‎)',
                CountryISO.WesternSahara,
                '212',
                1
            ],
            [
                'Yemen (‫اليمن‬‎)',
                CountryISO.Yemen,
                '967'
            ],
            [
                'Zambia',
                CountryISO.Zambia,
                '260'
            ],
            [
                'Zimbabwe',
                CountryISO.Zimbabwe,
                '263'
            ],
            [
                'Åland Islands',
                CountryISO.ÅlandIslands,
                '358',
                1
            ]
        ];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const phoneNumberValidator = (control) => {
    /** @type {?} */
    const isCheckValidation = document.getElementById('phone').getAttribute('validation');
    if (isCheckValidation == 'true') {
        /** @type {?} */
        const isRequired = control.errors && control.errors.required === true;
        /** @type {?} */
        const error = { validatePhoneNumber: { valid: false } };
        /** @type {?} */
        let number;
        try {
            number = PhoneNumberUtil.getInstance().parse(control.value.number, control.value.countryCode);
        }
        catch (e) {
            if (isRequired === true) {
                return error;
            }
        }
        if (control.value) {
            if (!number) {
                return error;
            }
            else {
                if (!PhoneNumberUtil.getInstance().isValidNumberForRegion(number, control.value.countryCode)) {
                    return error;
                }
            }
        }
    }
    else if (isCheckValidation == 'false') {
        control.clearValidators();
    }
    return;
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const SearchCountryField = {
    DialCode: 'dialCode',
    Iso2: 'iso2',
    Name: 'name',
    All: 'all',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const TooltipLabel = {
    Name: 'name',
    Iso2: 'iso2',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0 = phoneNumberValidator;
class NgxIntlTelInputComponent {
    /**
     * @param {?} countryCodeData
     */
    constructor(countryCodeData) {
        this.countryCodeData = countryCodeData;
        this.value = '';
        this.preferredCountries = [];
        this.enablePlaceholder = true;
        this.cssClass = 'form-control';
        this.onlyCountries = [];
        this.enableAutoCountrySelect = true;
        this.searchCountryFlag = false;
        this.searchCountryField = [SearchCountryField.All];
        this.maxLength = '';
        this.selectFirstCountry = true;
        this.phoneValidation = true;
        this.selectedCountry = {
            areaCodes: undefined,
            dialCode: '',
            flagClass: '',
            iso2: '',
            name: '',
            placeHolder: '',
            priority: 0
        };
        this.phoneNumber = '';
        this.allCountries = [];
        this.preferredCountriesInDropDown = [];
        // Has to be 'any' to prevent a need to install @types/google-libphonenumber by the package user...
        this.phoneUtil = PhoneNumberUtil.getInstance();
        this.disabled = false;
        this.errors = ['Phone number is required.'];
        this.countrySearchText = '';
        this.onTouched = () => { };
        this.propagateChange = (_) => { };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.fetchCountryData();
        if (this.preferredCountries.length) {
            this.getPreferredCountries();
        }
        if (this.onlyCountries.length) {
            this.allCountries = this.allCountries.filter(c => this.onlyCountries.includes(c.iso2));
        }
        if (this.selectFirstCountry) {
            if (this.preferredCountriesInDropDown.length) {
                this.selectedCountry = this.preferredCountriesInDropDown[0];
            }
            else {
                this.selectedCountry = this.allCountries[0];
            }
        }
        this.getSelectedCountry();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.allCountries && changes['selectedCountryISO']
            && changes['selectedCountryISO'].currentValue !== changes['selectedCountryISO'].previousValue) {
            this.getSelectedCountry();
        }
        if (changes.preferredCountries) {
            this.getPreferredCountries();
        }
    }
    /**
     * @return {?}
     */
    getPreferredCountries() {
        if (this.preferredCountries.length) {
            this.preferredCountriesInDropDown = [];
            this.preferredCountries.forEach(iso2 => {
                /** @type {?} */
                const preferredCountry = this.allCountries.filter((c) => {
                    return c.iso2 === iso2;
                });
                this.preferredCountriesInDropDown.push(preferredCountry[0]);
            });
        }
    }
    /**
     * @return {?}
     */
    getSelectedCountry() {
        if (this.selectedCountryISO) {
            this.selectedCountry = this.allCountries.find(c => { return (c.iso2.toLowerCase() === this.selectedCountryISO.toLowerCase()); });
            if (this.selectedCountry) {
                if (this.phoneNumber) {
                    this.onPhoneNumberChange();
                }
                else {
                    this.propagateChange(undefined);
                }
            }
        }
    }
    /**
     * Search country based on country name, iso2, dialCode or all of them.
     * @return {?}
     */
    searchCountry() {
        if (!this.countrySearchText) {
            this.countryList.nativeElement.querySelector('li').scrollIntoView({ behavior: 'smooth' });
            return;
        }
        /** @type {?} */
        const countrySearchTextLower = this.countrySearchText.toLowerCase();
        /** @type {?} */
        const country = this.allCountries.filter(c => {
            if (this.searchCountryField.indexOf(SearchCountryField.All) > -1) {
                // Search in all fields
                if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {
                    return c;
                }
                if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {
                    return c;
                }
                if (c.dialCode.startsWith(this.countrySearchText)) {
                    return c;
                }
            }
            else {
                // Or search by specific SearchCountryField(s)
                if (this.searchCountryField.indexOf(SearchCountryField.Iso2) > -1) {
                    if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {
                        return c;
                    }
                }
                if (this.searchCountryField.indexOf(SearchCountryField.Name) > -1) {
                    if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {
                        return c;
                    }
                }
                if (this.searchCountryField.indexOf(SearchCountryField.DialCode) > -1) {
                    if (c.dialCode.startsWith(this.countrySearchText)) {
                        return c;
                    }
                }
            }
        });
        if (country.length > 0) {
            /** @type {?} */
            const el = this.countryList.nativeElement.querySelector('#' + country[0].iso2);
            if (el) {
                el.scrollIntoView({ behavior: 'smooth' });
            }
        }
    }
    /**
     * @return {?}
     */
    onPhoneNumberChange() {
        this.value = this.phoneNumber;
        /** @type {?} */
        let number;
        try {
            number = this.phoneUtil.parse(this.phoneNumber, this.selectedCountry.iso2.toUpperCase());
        }
        catch (e) {
        }
        /** @type {?} */
        let countryCode = this.selectedCountry.iso2;
        // auto select country based on the extension (and areaCode if needed) (e.g select Canada if number starts with +1 416)
        if (this.enableAutoCountrySelect) {
            countryCode = number && number.getCountryCode()
                ? this.getCountryIsoCode(number.getCountryCode(), number)
                : this.selectedCountry.iso2;
            if (countryCode && countryCode !== this.selectedCountry.iso2) {
                /** @type {?} */
                const newCountry = this.allCountries.find(c => c.iso2 === countryCode);
                if (newCountry) {
                    this.selectedCountry = newCountry;
                }
            }
        }
        countryCode = countryCode ? countryCode : this.selectedCountry.iso2;
        if (!this.value) {
            // tslint:disable-next-line:no-null-keyword
            this.propagateChange(null);
        }
        else {
            this.propagateChange({
                number: this.value,
                internationalNumber: number ? this.phoneUtil.format(number, PhoneNumberFormat.INTERNATIONAL) : '',
                nationalNumber: number ? this.phoneUtil.format(number, PhoneNumberFormat.NATIONAL) : '',
                countryCode: countryCode.toUpperCase(),
                dialCode: '+' + this.selectedCountry.dialCode
            });
        }
    }
    /**
     * @param {?} country
     * @param {?} el
     * @return {?}
     */
    onCountrySelect(country, el) {
        this.selectedCountry = country;
        if (this.phoneNumber.length > 0) {
            this.value = this.phoneNumber;
            /** @type {?} */
            let number;
            try {
                number = this.phoneUtil.parse(this.phoneNumber, this.selectedCountry.iso2.toUpperCase());
            }
            catch (e) {
            }
            this.propagateChange({
                number: this.value,
                internationalNumber: number ? this.phoneUtil.format(number, PhoneNumberFormat.INTERNATIONAL) : '',
                nationalNumber: number ? this.phoneUtil.format(number, PhoneNumberFormat.NATIONAL) : '',
                countryCode: this.selectedCountry.iso2.toUpperCase(),
                dialCode: '+' + this.selectedCountry.dialCode
            });
        }
        el.focus();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onInputKeyPress(event) {
        /** @type {?} */
        const allowedChars = /[0-9\+\-\ ]/;
        /** @type {?} */
        const allowedCtrlChars = /[axcv]/;
        // Allows copy-pasting
        /** @type {?} */
        const allowedOtherKeys = [
            'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',
            'Home', 'End', 'Insert', 'Delete', 'Backspace'
        ];
        if (!allowedChars.test(event.key)
            && !(event.ctrlKey && allowedCtrlChars.test(event.key))
            && !(allowedOtherKeys.includes(event.key))) {
            event.preventDefault();
        }
    }
    /**
     * @protected
     * @return {?}
     */
    fetchCountryData() {
        this.countryCodeData.allCountries.forEach(c => {
            /** @type {?} */
            const country = {
                name: c[0].toString(),
                iso2: c[1].toString(),
                dialCode: c[2].toString(),
                priority: +c[3] || 0,
                areaCodes: (/** @type {?} */ (c[4])) || undefined,
                flagClass: c[1].toString().toLocaleLowerCase(),
                placeHolder: ''
            };
            if (this.enablePlaceholder) {
                country.placeHolder = this.getPhoneNumberPlaceHolder(country.iso2.toUpperCase());
            }
            this.allCountries.push(country);
        });
    }
    /**
     * @protected
     * @param {?} countryCode
     * @return {?}
     */
    getPhoneNumberPlaceHolder(countryCode) {
        try {
            return this.phoneUtil.format(this.phoneUtil.getExampleNumber(countryCode), PhoneNumberFormat.INTERNATIONAL);
        }
        catch (e) {
            return e;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        if (typeof obj !== 'object') {
            this.phoneNumber = obj;
        }
        setTimeout(() => {
            this.onPhoneNumberChange();
        }, 1);
    }
    /**
     * @private
     * @param {?} countryCode
     * @param {?} number
     * @return {?}
     */
    getCountryIsoCode(countryCode, number) {
        // Will use this to match area code from the first numbers
        /** @type {?} */
        const rawNumber = number['values_']['2'].toString();
        // List of all countries with countryCode (can be more than one. e.x. US, CA, DO, PR all have +1 countryCode)
        /** @type {?} */
        const countries = this.allCountries.filter(c => c.dialCode === countryCode.toString());
        // Main country is the country, which has no areaCodes specified in country-code.ts file.
        /** @type {?} */
        const mainCountry = countries.find(c => c.areaCodes === undefined);
        // Secondary countries are all countries, which have areaCodes specified in country-code.ts file.
        /** @type {?} */
        const secondaryCountries = countries.filter(c => c.areaCodes !== undefined);
        /** @type {?} */
        let matchedCountry = mainCountry ? mainCountry.iso2 : undefined;
        /*
            Interate over each secondary country and check if nationalNumber starts with any of areaCodes available.
            If no matches found, fallback to the main country.
        */
        secondaryCountries.forEach(country => {
            country.areaCodes.forEach(areaCode => {
                if (rawNumber.startsWith(areaCode)) {
                    matchedCountry = country.iso2;
                }
            });
        });
        return matchedCountry;
    }
}
NgxIntlTelInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-intl-tel-input',
                template: "<div class=\"intl-tel-input allow-dropdown\">\n  <div class=\"flag-container\" dropdown [ngClass]=\"{'disabled': disabled}\">\n    <div class=\"selected-flag dropdown-toggle\" dropdownToggle>\n      <div class=\"iti-flag\" [ngClass]=\"selectedCountry?.flagClass\"\n        [tooltip]=\"selectedCountry ? selectedCountry[tooltipField] : ''\"></div>\n      <div class=\"iti-arrow\"></div>\n    </div>\n    <div *dropdownMenu class=\"dropdown-menu country-dropdown\">\n      <div class=\"search-container\" *ngIf=\"searchCountryFlag && searchCountryField\">\n        <input id=\"country-search-box\" [(ngModel)]=\"countrySearchText\" (keyup)=\"searchCountry()\"\n          (click)=\"$event.stopPropagation()\" autofocus>\n      </div>\n      <ul class=\"country-list\" #countryList>\n        <li class=\"country\" *ngFor=\"let country of preferredCountriesInDropDown\"\n          (click)=\"onCountrySelect(country, focusable)\" [id]=\"country.iso2\">\n          <div class=\"flag-box\">\n            <div class=\"iti-flag\" [ngClass]=\"country.flagClass\"></div>\n          </div>\n          <span class=\"country-name\">{{country.name}}</span>\n          <span class=\"dial-code\">+{{country.dialCode}}</span>\n        </li>\n        <li class=\"divider\" *ngIf=\"preferredCountriesInDropDown?.length\"></li>\n        <li class=\"country\" *ngFor=\"let country of allCountries\" (click)=\"onCountrySelect(country, focusable)\"\n          [id]=\"country.iso2\">\n          <div class=\"flag-box\">\n            <div class=\"iti-flag\" [ngClass]=\"country.flagClass\"></div>\n          </div>\n          <span class=\"country-name\">{{country.name}}</span>\n          <span class=\"dial-code\">+{{country.dialCode}}</span>\n        </li>\n      </ul>\n    </div>\n  </div>\n  <input type=\"tel\" id=\"phone\" autocomplete=\"off\" [ngClass]=\"cssClass\" (blur)=\"onTouched()\"\n    (keypress)=\"onInputKeyPress($event)\" [(ngModel)]=\"phoneNumber\" (ngModelChange)=\"onPhoneNumberChange()\"\n    [disabled]=\"disabled\" [placeholder]=\"selectedCountry?.placeHolder || ''\" [attr.maxLength]=\"maxLength\"\n    [attr.validation]=\"phoneValidation\" #focusable>\n</div>",
                providers: [
                    CountryCode,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        // tslint:disable-next-line:no-forward-ref
                        useExisting: forwardRef(() => NgxIntlTelInputComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useValue: ɵ0,
                        multi: true,
                    }
                ],
                styles: ["li.country:hover{background-color:rgba(0,0,0,.05)}.selected-flag.dropdown-toggle:after{content:none}.flag-container.disabled{cursor:default!important}.intl-tel-input.allow-dropdown .flag-container.disabled:hover .selected-flag{background:0 0}.country-dropdown{border:1px solid #ccc;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;padding:1px;border-collapse:collapse}.search-container{position:relative}.search-container input{width:100%;border:none;border-bottom:1px solid #ccc;padding-left:10px}.search-icon{position:absolute;z-index:2;width:25px;margin:1px 10px}.country-list{position:relative;border:none}"]
            }] }
];
/** @nocollapse */
NgxIntlTelInputComponent.ctorParameters = () => [
    { type: CountryCode }
];
NgxIntlTelInputComponent.propDecorators = {
    value: [{ type: Input }],
    preferredCountries: [{ type: Input }],
    enablePlaceholder: [{ type: Input }],
    cssClass: [{ type: Input }],
    onlyCountries: [{ type: Input }],
    enableAutoCountrySelect: [{ type: Input }],
    searchCountryFlag: [{ type: Input }],
    searchCountryField: [{ type: Input }],
    maxLength: [{ type: Input }],
    tooltipField: [{ type: Input }],
    selectFirstCountry: [{ type: Input }],
    selectedCountryISO: [{ type: Input }],
    phoneValidation: [{ type: Input }],
    countryList: [{ type: ViewChild, args: ['countryList',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxIntlTelInputModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NgxIntlTelInputModule,
            providers: [NgxIntlTelInputService]
        };
    }
}
NgxIntlTelInputModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgxIntlTelInputComponent],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    BsDropdownModule.forRoot(),
                    TooltipModule.forRoot()
                ],
                exports: [NgxIntlTelInputComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxIntlTelInputService, NgxIntlTelInputComponent, NgxIntlTelInputModule, CountryISO, SearchCountryField, TooltipLabel, CountryCode as ɵa, phoneNumberValidator as ɵb };

//# sourceMappingURL=ngx-intl-tel-input.js.map